// Package internal provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package internal

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for MonitorConfigRunSpecRunType.
const (
	Dll MonitorConfigRunSpecRunType = "dll"
	Exe MonitorConfigRunSpecRunType = "exe"
)

// MonitorConfig A monitor configuration definition
type MonitorConfig struct {
	// IntervalSecs The time between monitor runs in seconds
	IntervalSecs *int `json:"interval_secs,omitempty"`

	// MonitorLogicalName The monitor logical name of the monitor to configure
	MonitorLogicalName *string `json:"monitor_logical_name,omitempty"`

	// RunGroups The run groups for this config
	RunGroups *[]string `json:"run_groups,omitempty"`

	// RunSpec A run specification for a monitor config
	RunSpec *MonitorConfigRunSpec `json:"run_spec,omitempty"`

	// Steps A collection of Monitor Config Steps
	Steps *MonitorConfigSteps `json:"steps,omitempty"`
}

// MonitorConfigRunSpec A run specification for a monitor config
type MonitorConfigRunSpec struct {
	// Name The name of the monitor
	Name *string `json:"name,omitempty"`

	// RunType The run type, one of dll, exe
	RunType *MonitorConfigRunSpecRunType `json:"run_type,omitempty"`
}

// MonitorConfigRunSpecRunType The run type, one of dll, exe
type MonitorConfigRunSpecRunType string

// MonitorConfigStep A monitor configuration definition
type MonitorConfigStep struct {
	// CheckLogicalName The name of the check to run
	CheckLogicalName *string `json:"check_logical_name,omitempty"`

	// TimeoutSecs The timeout value for the check
	TimeoutSecs *int `json:"timeout_secs,omitempty"`
}

// MonitorConfigSteps A collection of Monitor Config Steps
type MonitorConfigSteps = []MonitorConfigStep

// MonitorError An error generated from a monitor
type MonitorError struct {
	// Check Check that generated the error
	Check *string `json:"check,omitempty"`

	// Count Error count
	Count *int `json:"count,omitempty"`

	// Instance Instance that generated the error
	Instance *string `json:"instance,omitempty"`

	// MonitorLogicalName Logical name of monitor
	MonitorLogicalName *string `json:"monitor_logical_name,omitempty"`

	// Timestamp Time when the error was generated
	Timestamp *string `json:"timestamp,omitempty"`
}

// MonitorErrors A collection of Monitor Errors
type MonitorErrors = []MonitorError

// MonitorErrorsPage A page of monitor errors
type MonitorErrorsPage struct {
	// Entries A collection of Monitor Errors
	Entries *MonitorErrors `json:"entries,omitempty"`

	// Metadata Defines page metadata
	Metadata *PageMetadata `json:"metadata,omitempty"`
}

// MonitorList A list of monitors
type MonitorList = []MonitorListEntry

// MonitorListEntry A single monitor in the list
type MonitorListEntry struct {
	// LogicalName the logical name of the monitor
	LogicalName *string `json:"logical_name,omitempty"`

	// Name the name of the monitor
	Name *string `json:"name,omitempty"`
}

// MonitorStatus A status for a single monitor
type MonitorStatus struct {
	// LastChecked The last time this monitor was checked by Metrist
	LastChecked *string `json:"last_checked,omitempty"`

	// MonitorLogicalName Logical name of monitor
	MonitorLogicalName *string `json:"monitor_logical_name,omitempty"`

	// State The state of the monitor up, degraded, issues, down
	State *string `json:"state,omitempty"`
}

// MonitorStatuses A collection of monitor statuses
type MonitorStatuses = []MonitorStatus

// MonitorTelemetry A collection of Telemetry Entries
type MonitorTelemetry = []TelemetryEntry

// PageMetadata Defines page metadata
type PageMetadata struct {
	// CursorAfter an opaque cursor representing the last row of the current page
	CursorAfter *string `json:"cursor_after,omitempty"`

	// CursorBefore an opaque cursor representing the first row of the current page
	CursorBefore *string `json:"cursor_before,omitempty"`
}

// StatusPageChanges A collection of Status Page Component Changes
type StatusPageChanges = []StatusPageComponentChange

// StatusPageChangesPage A page of status page changes
type StatusPageChangesPage struct {
	// Entries A collection of Status Page Component Changes
	Entries *StatusPageChanges `json:"entries,omitempty"`

	// Metadata Defines page metadata
	Metadata *PageMetadata `json:"metadata,omitempty"`
}

// StatusPageComponentChange A single change for a single status page component
type StatusPageComponentChange struct {
	// Component Component name that was changed
	Component *string `json:"component,omitempty"`

	// MonitorLogicalName Logical name of monitor
	MonitorLogicalName *string `json:"monitor_logical_name,omitempty"`

	// Status Status from the provider status page
	Status *string `json:"status,omitempty"`

	// Timestamp Time when the change occurred
	Timestamp *string `json:"timestamp,omitempty"`
}

// TelemetryEntry A single piece of telemetry for a monitor
type TelemetryEntry struct {
	// Check Check that generated the error
	Check *string `json:"check,omitempty"`

	// Instance Instance that generated the error
	Instance *string `json:"instance,omitempty"`

	// MonitorLogicalName Logical name of monitor
	MonitorLogicalName *string `json:"monitor_logical_name,omitempty"`

	// Timestamp Time when the error was generated
	Timestamp *string `json:"timestamp,omitempty"`

	// Value The average time this check took to execute in milliseconds
	Value *float32 `json:"value,omitempty"`
}

// BackendWebMonitorErrorControllerGetParams defines parameters for BackendWebMonitorErrorControllerGet.
type BackendWebMonitorErrorControllerGetParams struct {
	// From Start of datetime range in ISO_8601 format
	From string `form:"from" json:"from"`

	// To End of datetime range in ISO_8601 format
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// CursorAfter Fetch the records after this cursor.
	CursorAfter *string `form:"cursor_after,omitempty" json:"cursor_after,omitempty"`

	// CursorBefore Fetch the records before this cursor.
	CursorBefore *string `form:"cursor_before,omitempty" json:"cursor_before,omitempty"`

	// Limit Limit of the result set
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// OnlyShared Whether to only return SHARED data in returned results. If omitted, the account specific data is returned
	OnlyShared *bool `form:"only_shared,omitempty" json:"only_shared,omitempty"`

	// M One or more monitors to get the errors for.
	// These should be the logical names for the monitors.
	// If omitted all monitors on the account are included
	M *[]string `form:"m[],omitempty" json:"m[],omitempty"`
}

// BackendWebMonitorStatusControllerGetParams defines parameters for BackendWebMonitorStatusControllerGet.
type BackendWebMonitorStatusControllerGetParams struct {
	// M One or more monitors to get the status for.
	// These should be the logical names for the monitors.
	// If omitted all monitors on the account are included
	M []string `form:"m[]" json:"m[]"`
}

// BackendWebStatusPageChangeControllerGetParams defines parameters for BackendWebStatusPageChangeControllerGet.
type BackendWebStatusPageChangeControllerGetParams struct {
	// From Start of datetime range in ISO_8601 format
	From string `form:"from" json:"from"`

	// To End of datetime range in ISO_8601 format
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// CursorAfter Fetch the records after this cursor.
	CursorAfter *string `form:"cursor_after,omitempty" json:"cursor_after,omitempty"`

	// CursorBefore Fetch the records before this cursor.
	CursorBefore *string `form:"cursor_before,omitempty" json:"cursor_before,omitempty"`

	// Limit Limit of the result set
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// M One or more monitors to get the errors for.
	// These should be the logical names for the monitors.
	// If omitted all monitors on the account are included
	M *[]string `form:"m[],omitempty" json:"m[],omitempty"`
}

// BackendWebMonitorTelemetryControllerGetParams defines parameters for BackendWebMonitorTelemetryControllerGet.
type BackendWebMonitorTelemetryControllerGetParams struct {
	// From Start of datetime range in ISO_8601 format
	From string `form:"from" json:"from"`

	// To End of datetime range in ISO_8601 format
	To *string `form:"to,omitempty" json:"to,omitempty"`

	// IncludeShared Whether to include SHARED data in returned results. If omitted SHARED data will not be included
	IncludeShared *bool `form:"include_shared,omitempty" json:"include_shared,omitempty"`

	// M One or more monitors to get the errors for.
	// These should be the logical names for the monitors.
	// If omitted all monitors on the account are included
	M *[]string `form:"m[],omitempty" json:"m[],omitempty"`
}

// BackendWebMonitorConfigControllerPostJSONRequestBody defines body for BackendWebMonitorConfigControllerPost for application/json ContentType.
type BackendWebMonitorConfigControllerPostJSONRequestBody = MonitorConfig

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BackendWebMonitorConfigControllerPost request with any body
	BackendWebMonitorConfigControllerPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BackendWebMonitorConfigControllerPost(ctx context.Context, body BackendWebMonitorConfigControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebMonitorConfigControllerDelete request
	BackendWebMonitorConfigControllerDelete(ctx context.Context, monitor string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebMonitorErrorControllerGet request
	BackendWebMonitorErrorControllerGet(ctx context.Context, params *BackendWebMonitorErrorControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebMonitorListControllerGet request
	BackendWebMonitorListControllerGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebMonitorStatusControllerGet request
	BackendWebMonitorStatusControllerGet(ctx context.Context, params *BackendWebMonitorStatusControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebStatusPageChangeControllerGet request
	BackendWebStatusPageChangeControllerGet(ctx context.Context, params *BackendWebStatusPageChangeControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebMonitorTelemetryControllerGet request
	BackendWebMonitorTelemetryControllerGet(ctx context.Context, params *BackendWebMonitorTelemetryControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BackendWebVerifyAuthControllerGet request
	BackendWebVerifyAuthControllerGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BackendWebMonitorConfigControllerPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorConfigControllerPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebMonitorConfigControllerPost(ctx context.Context, body BackendWebMonitorConfigControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorConfigControllerPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebMonitorConfigControllerDelete(ctx context.Context, monitor string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorConfigControllerDeleteRequest(c.Server, monitor, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebMonitorErrorControllerGet(ctx context.Context, params *BackendWebMonitorErrorControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorErrorControllerGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebMonitorListControllerGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorListControllerGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebMonitorStatusControllerGet(ctx context.Context, params *BackendWebMonitorStatusControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorStatusControllerGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebStatusPageChangeControllerGet(ctx context.Context, params *BackendWebStatusPageChangeControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebStatusPageChangeControllerGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebMonitorTelemetryControllerGet(ctx context.Context, params *BackendWebMonitorTelemetryControllerGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebMonitorTelemetryControllerGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BackendWebVerifyAuthControllerGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBackendWebVerifyAuthControllerGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBackendWebMonitorConfigControllerPostRequest calls the generic BackendWebMonitorConfigControllerPost builder with application/json body
func NewBackendWebMonitorConfigControllerPostRequest(server string, body BackendWebMonitorConfigControllerPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBackendWebMonitorConfigControllerPostRequestWithBody(server, "application/json", bodyReader)
}

// NewBackendWebMonitorConfigControllerPostRequestWithBody generates requests for BackendWebMonitorConfigControllerPost with any type of body
func NewBackendWebMonitorConfigControllerPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBackendWebMonitorConfigControllerDeleteRequest generates requests for BackendWebMonitorConfigControllerDelete
func NewBackendWebMonitorConfigControllerDeleteRequest(server string, monitor string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitor", runtime.ParamLocationPath, monitor)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-config/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackendWebMonitorErrorControllerGetRequest generates requests for BackendWebMonitorErrorControllerGet
func NewBackendWebMonitorErrorControllerGetRequest(server string, params *BackendWebMonitorErrorControllerGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CursorAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor_after", runtime.ParamLocationQuery, *params.CursorAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CursorBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor_before", runtime.ParamLocationQuery, *params.CursorBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OnlyShared != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_shared", runtime.ParamLocationQuery, *params.OnlyShared); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.M != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "m[]", runtime.ParamLocationQuery, *params.M); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackendWebMonitorListControllerGetRequest generates requests for BackendWebMonitorListControllerGet
func NewBackendWebMonitorListControllerGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackendWebMonitorStatusControllerGetRequest generates requests for BackendWebMonitorStatusControllerGet
func NewBackendWebMonitorStatusControllerGetRequest(server string, params *BackendWebMonitorStatusControllerGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "m[]", runtime.ParamLocationQuery, params.M); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackendWebStatusPageChangeControllerGetRequest generates requests for BackendWebStatusPageChangeControllerGet
func NewBackendWebStatusPageChangeControllerGetRequest(server string, params *BackendWebStatusPageChangeControllerGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-status-page-change")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CursorAfter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor_after", runtime.ParamLocationQuery, *params.CursorAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CursorBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor_before", runtime.ParamLocationQuery, *params.CursorBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.M != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "m[]", runtime.ParamLocationQuery, *params.M); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackendWebMonitorTelemetryControllerGetRequest generates requests for BackendWebMonitorTelemetryControllerGet
func NewBackendWebMonitorTelemetryControllerGetRequest(server string, params *BackendWebMonitorTelemetryControllerGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitor-telemetry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeShared != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_shared", runtime.ParamLocationQuery, *params.IncludeShared); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.M != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "m[]", runtime.ParamLocationQuery, *params.M); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBackendWebVerifyAuthControllerGetRequest generates requests for BackendWebVerifyAuthControllerGet
func NewBackendWebVerifyAuthControllerGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/verify-auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BackendWebMonitorConfigControllerPost request with any body
	BackendWebMonitorConfigControllerPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BackendWebMonitorConfigControllerPostResponse, error)

	BackendWebMonitorConfigControllerPostWithResponse(ctx context.Context, body BackendWebMonitorConfigControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BackendWebMonitorConfigControllerPostResponse, error)

	// BackendWebMonitorConfigControllerDelete request
	BackendWebMonitorConfigControllerDeleteWithResponse(ctx context.Context, monitor string, id string, reqEditors ...RequestEditorFn) (*BackendWebMonitorConfigControllerDeleteResponse, error)

	// BackendWebMonitorErrorControllerGet request
	BackendWebMonitorErrorControllerGetWithResponse(ctx context.Context, params *BackendWebMonitorErrorControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebMonitorErrorControllerGetResponse, error)

	// BackendWebMonitorListControllerGet request
	BackendWebMonitorListControllerGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BackendWebMonitorListControllerGetResponse, error)

	// BackendWebMonitorStatusControllerGet request
	BackendWebMonitorStatusControllerGetWithResponse(ctx context.Context, params *BackendWebMonitorStatusControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebMonitorStatusControllerGetResponse, error)

	// BackendWebStatusPageChangeControllerGet request
	BackendWebStatusPageChangeControllerGetWithResponse(ctx context.Context, params *BackendWebStatusPageChangeControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebStatusPageChangeControllerGetResponse, error)

	// BackendWebMonitorTelemetryControllerGet request
	BackendWebMonitorTelemetryControllerGetWithResponse(ctx context.Context, params *BackendWebMonitorTelemetryControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebMonitorTelemetryControllerGetResponse, error)

	// BackendWebVerifyAuthControllerGet request
	BackendWebVerifyAuthControllerGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BackendWebVerifyAuthControllerGetResponse, error)
}

type BackendWebMonitorConfigControllerPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BackendWebMonitorConfigControllerPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebMonitorConfigControllerPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebMonitorConfigControllerDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BackendWebMonitorConfigControllerDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebMonitorConfigControllerDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebMonitorErrorControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitorErrorsPage
}

// Status returns HTTPResponse.Status
func (r BackendWebMonitorErrorControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebMonitorErrorControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebMonitorListControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitorList
}

// Status returns HTTPResponse.Status
func (r BackendWebMonitorListControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebMonitorListControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebMonitorStatusControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitorStatuses
}

// Status returns HTTPResponse.Status
func (r BackendWebMonitorStatusControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebMonitorStatusControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebStatusPageChangeControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPageChangesPage
}

// Status returns HTTPResponse.Status
func (r BackendWebStatusPageChangeControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebStatusPageChangeControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebMonitorTelemetryControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MonitorTelemetry
}

// Status returns HTTPResponse.Status
func (r BackendWebMonitorTelemetryControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebMonitorTelemetryControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BackendWebVerifyAuthControllerGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BackendWebVerifyAuthControllerGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BackendWebVerifyAuthControllerGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BackendWebMonitorConfigControllerPostWithBodyWithResponse request with arbitrary body returning *BackendWebMonitorConfigControllerPostResponse
func (c *ClientWithResponses) BackendWebMonitorConfigControllerPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BackendWebMonitorConfigControllerPostResponse, error) {
	rsp, err := c.BackendWebMonitorConfigControllerPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorConfigControllerPostResponse(rsp)
}

func (c *ClientWithResponses) BackendWebMonitorConfigControllerPostWithResponse(ctx context.Context, body BackendWebMonitorConfigControllerPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BackendWebMonitorConfigControllerPostResponse, error) {
	rsp, err := c.BackendWebMonitorConfigControllerPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorConfigControllerPostResponse(rsp)
}

// BackendWebMonitorConfigControllerDeleteWithResponse request returning *BackendWebMonitorConfigControllerDeleteResponse
func (c *ClientWithResponses) BackendWebMonitorConfigControllerDeleteWithResponse(ctx context.Context, monitor string, id string, reqEditors ...RequestEditorFn) (*BackendWebMonitorConfigControllerDeleteResponse, error) {
	rsp, err := c.BackendWebMonitorConfigControllerDelete(ctx, monitor, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorConfigControllerDeleteResponse(rsp)
}

// BackendWebMonitorErrorControllerGetWithResponse request returning *BackendWebMonitorErrorControllerGetResponse
func (c *ClientWithResponses) BackendWebMonitorErrorControllerGetWithResponse(ctx context.Context, params *BackendWebMonitorErrorControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebMonitorErrorControllerGetResponse, error) {
	rsp, err := c.BackendWebMonitorErrorControllerGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorErrorControllerGetResponse(rsp)
}

// BackendWebMonitorListControllerGetWithResponse request returning *BackendWebMonitorListControllerGetResponse
func (c *ClientWithResponses) BackendWebMonitorListControllerGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BackendWebMonitorListControllerGetResponse, error) {
	rsp, err := c.BackendWebMonitorListControllerGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorListControllerGetResponse(rsp)
}

// BackendWebMonitorStatusControllerGetWithResponse request returning *BackendWebMonitorStatusControllerGetResponse
func (c *ClientWithResponses) BackendWebMonitorStatusControllerGetWithResponse(ctx context.Context, params *BackendWebMonitorStatusControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebMonitorStatusControllerGetResponse, error) {
	rsp, err := c.BackendWebMonitorStatusControllerGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorStatusControllerGetResponse(rsp)
}

// BackendWebStatusPageChangeControllerGetWithResponse request returning *BackendWebStatusPageChangeControllerGetResponse
func (c *ClientWithResponses) BackendWebStatusPageChangeControllerGetWithResponse(ctx context.Context, params *BackendWebStatusPageChangeControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebStatusPageChangeControllerGetResponse, error) {
	rsp, err := c.BackendWebStatusPageChangeControllerGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebStatusPageChangeControllerGetResponse(rsp)
}

// BackendWebMonitorTelemetryControllerGetWithResponse request returning *BackendWebMonitorTelemetryControllerGetResponse
func (c *ClientWithResponses) BackendWebMonitorTelemetryControllerGetWithResponse(ctx context.Context, params *BackendWebMonitorTelemetryControllerGetParams, reqEditors ...RequestEditorFn) (*BackendWebMonitorTelemetryControllerGetResponse, error) {
	rsp, err := c.BackendWebMonitorTelemetryControllerGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebMonitorTelemetryControllerGetResponse(rsp)
}

// BackendWebVerifyAuthControllerGetWithResponse request returning *BackendWebVerifyAuthControllerGetResponse
func (c *ClientWithResponses) BackendWebVerifyAuthControllerGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BackendWebVerifyAuthControllerGetResponse, error) {
	rsp, err := c.BackendWebVerifyAuthControllerGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBackendWebVerifyAuthControllerGetResponse(rsp)
}

// ParseBackendWebMonitorConfigControllerPostResponse parses an HTTP response from a BackendWebMonitorConfigControllerPostWithResponse call
func ParseBackendWebMonitorConfigControllerPostResponse(rsp *http.Response) (*BackendWebMonitorConfigControllerPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebMonitorConfigControllerPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBackendWebMonitorConfigControllerDeleteResponse parses an HTTP response from a BackendWebMonitorConfigControllerDeleteWithResponse call
func ParseBackendWebMonitorConfigControllerDeleteResponse(rsp *http.Response) (*BackendWebMonitorConfigControllerDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebMonitorConfigControllerDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseBackendWebMonitorErrorControllerGetResponse parses an HTTP response from a BackendWebMonitorErrorControllerGetWithResponse call
func ParseBackendWebMonitorErrorControllerGetResponse(rsp *http.Response) (*BackendWebMonitorErrorControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebMonitorErrorControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitorErrorsPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBackendWebMonitorListControllerGetResponse parses an HTTP response from a BackendWebMonitorListControllerGetWithResponse call
func ParseBackendWebMonitorListControllerGetResponse(rsp *http.Response) (*BackendWebMonitorListControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebMonitorListControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBackendWebMonitorStatusControllerGetResponse parses an HTTP response from a BackendWebMonitorStatusControllerGetWithResponse call
func ParseBackendWebMonitorStatusControllerGetResponse(rsp *http.Response) (*BackendWebMonitorStatusControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebMonitorStatusControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitorStatuses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBackendWebStatusPageChangeControllerGetResponse parses an HTTP response from a BackendWebStatusPageChangeControllerGetWithResponse call
func ParseBackendWebStatusPageChangeControllerGetResponse(rsp *http.Response) (*BackendWebStatusPageChangeControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebStatusPageChangeControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageChangesPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBackendWebMonitorTelemetryControllerGetResponse parses an HTTP response from a BackendWebMonitorTelemetryControllerGetWithResponse call
func ParseBackendWebMonitorTelemetryControllerGetResponse(rsp *http.Response) (*BackendWebMonitorTelemetryControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebMonitorTelemetryControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitorTelemetry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBackendWebVerifyAuthControllerGetResponse parses an HTTP response from a BackendWebVerifyAuthControllerGetWithResponse call
func ParseBackendWebVerifyAuthControllerGetResponse(rsp *http.Response) (*BackendWebVerifyAuthControllerGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BackendWebVerifyAuthControllerGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
